[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome!",
    "section": "",
    "text": "Welcome! This is the first post.\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science Tips",
    "section": "",
    "text": "Data Frame vs Tibble\n\n\n\n\n\n\n\nr\n\n\ndata.frame\n\n\ntibble\n\n\n\n\n\n\n\n\n\n\n\nDec 13, 2024\n\n\nFilippo Cavallari\n\n\n\n\n\n\n  \n\n\n\n\nWelcome!\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nDec 12, 2024\n\n\nFilippo Cavallari\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/df-vs-tibble/index.html",
    "href": "posts/df-vs-tibble/index.html",
    "title": "Data Frame vs Tibble",
    "section": "",
    "text": "Data Frames\nBy default R provides a data structure, called data.frame, to store and manipulate tabular data. A data.frame is a list of equal-length vectors.\nCreating a data.frame is as easy as\n\ndata.frame(c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n           1:5)\n##   c..A....B....C....D....E.. X1.5\n## 1                          A    1\n## 2                          B    2\n## 3                          C    3\n## 4                          D    4\n## 5                          E    5\n\nThe elements of a data.frame will be named automatically (see binding basics for more details).\nCustom names can be used:\n\ndata.frame(letters = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n           numbers = 1:5)\n##   letters numbers\n## 1       A       1\n## 2       B       2\n## 3       C       3\n## 4       D       4\n## 5       E       5\n\ndplyr verbs work as expected on data frames. For example:\n\ndata.frame(letters = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n           numbers = 1:5) |&gt;\n  dplyr::select(letters)\n##   letters\n## 1       A\n## 2       B\n## 3       C\n## 4       D\n## 5       E\n\ndata.frame(letters = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n           numbers = 1:5) |&gt;\n  dplyr::filter(letters %in% c(\"A\", \"E\") | numbers == 4)\n##   letters numbers\n## 1       A       1\n## 2       D       4\n## 3       E       5\n\n\n\nTibbles\nA tibble can be created using the same pattern but with a different function:\n\ntibble::tibble(letters = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n               numbers = 1:5)\n## # A tibble: 5 × 2\n##   letters numbers\n##   &lt;chr&gt;     &lt;int&gt;\n## 1 A             1\n## 2 B             2\n## 3 C             3\n## 4 D             4\n## 5 E             5\n\ntibble::tibble(letters = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n               numbers = 1:5) |&gt;\n  dplyr::filter(letters %in% c(\"A\", \"E\") | numbers == 4)\n## # A tibble: 3 × 2\n##   letters numbers\n##   &lt;chr&gt;     &lt;int&gt;\n## 1 A             1\n## 2 D             4\n## 3 E             5\n\n\n\nDifferences\nThe first difference between data.frame and tibble is about printing: tibbles have a print method that shows only the first 10 rows, and all the columns that fit on screen. This makes it much easier to work with large data. In addition to its name, each column reports its type.\nThe second difference is about subsetting. Data frames allow partial matching for column names:\n\ndata &lt;- data.frame(letters = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n                   numbers = 1:5)\n\ndata$let\n## [1] \"A\" \"B\" \"C\" \"D\" \"E\"\n\nOn the other hand, tibble are more strict about subsetting, and\n\ndata &lt;- tibble::tibble(letters = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n                       numbers = 1:5)\n\ndata$let\n## Warning: Unknown or uninitialised column: `let`.\n## NULL\n\nThis can be very helpful, especially when debugging code, because the message tells use where the problem is. Look at what happens in the following example:\n\ndata &lt;- data.frame(letters_upper = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n                   letters_lower = c(\"a\", \"b\", \"c\", \"d\", \"e\"),\n                   numbers = 1:5)\n\ndata$let\n## NULL\n\nSince more than one column name partially matches the string let, subsetting returns NULL without generating a warning. It would be more difficult to debug a bigger chunck of code if this technique is used. Therefore it’s advisable to avoid partial matching when subsetting. Tibbles are good because they forbid us to use it.\n\n\nTribbles\nFinally, the tibble package includes the function tribble to define tibbles by row rather than by column. This is useful for small tables of data where readability is important.\nFor example:\n\ntibble::tribble(~letters, ~numbers,\n                \"A\",1,\n                \"B\",2,\n                \"C\",3,\n                \"D\",4,\n                \"E\",5)\n## # A tibble: 5 × 2\n##   letters numbers\n##   &lt;chr&gt;     &lt;dbl&gt;\n## 1 A             1\n## 2 B             2\n## 3 C             3\n## 4 D             4\n## 5 E             5\n\n\n\nReferences\n\nR for Data Science\nTibble package\nTibble from Posit blog"
  }
]